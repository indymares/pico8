pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--main

function _init()
		level = "easy"
  selected = 0
  scene = "menu"
end

function _update()
		if scene == "info" then 
				if btnp(üÖæÔ∏è) then scene = "menu" end		
		elseif scene == "game" then
				choice()
				if btnp(‚ùé) then check() end
				if solved == true then 
						if btnp(üÖæÔ∏è) then scene = "menu" end
				end
		elseif scene == "menu" then
				select_menu()
		elseif scene == "dead" then
				if btnp(‚ùé) then 
						scene = "menu"
						restart() end
		end
end

function _draw()
		if scene == "info" then
				cls()
				print("in game:",4,4)
				print("easy mode: ooubles, no blanks",4,12)
				print("hard mode: doubles, blanks",4,20)		
				print("‚¨ÖÔ∏è and ‚û°Ô∏è change the bubble",4,28)
				print("‚¨ÜÔ∏è and ‚¨áÔ∏è change the color",4,36)
				print("‚ùé makes a guess",4,44)
				print("press üÖæÔ∏è to return to menu",4,115)
		elseif scene == "game"	then			
				cls(10)
				print(level,4,4,8)
				map(0,0)
				if solved then
						spr(code[1],37,5)
						spr(code[2],52,5)
						spr(code[3],67,5)
						spr(code[4],82,5)
						print("you won!!", 50, 0, 8)
				end
				draw_bubbles()
				draw_pins()
		elseif scene == "menu" then
				cls()
				map(0,0)
				print("easy", 53, 35, selected == 0 and 10 or 7)
				print("hard", 53, 45, selected 	== 1 and 10 or 7)
				print("info", 53, 55, selected == 2 and 10 or 7)
		elseif scene == "dead" then
				cls()
				map(16,0)
				print("you lost", 50, 45)
				print("press ‚ùé to try again", 25, 55)
		end	
end
-->8
--choice, select, and reset

function select_menu()
		if btnp(‚ùé) and selected == 0 then 
				level = "easy"
				scene = "game"
				restart() end 
		if btnp(‚ùé) and selected == 1 then 
				level = "hard"
				scene = "game"
				restart() end
		if btnp(‚ùé) and selected == 2 then 
				scene = "info"
				restart() end
		--checks down
		if btnp(‚¨áÔ∏è) then 
				if selected == 2 then
				  selected = 0
				else
				  selected += 1
			 end	
		end
		--checks up
		if btnp(‚¨ÜÔ∏è) then 
				if selected == 0 then
				  selected = 2
				else
				  selected -= 1
				end
		end
end

function choice()
		--how to lose
		if current_row > 10 then scene = "dead" end

		--switching colors up
		if btnp(‚¨ÜÔ∏è) then
	   guesses[current_row][current_guess] -= 1
	   if level == "hard" then
			   if guesses[current_row][current_guess] < 1 then 
			     guesses[current_row][current_guess] = 7
		    end
		  else
			   if guesses[current_row][current_guess] < 1 then 
			     guesses[current_row][current_guess] = 6
		    end
		  end
  end	
		
		--switching colors down
		if btnp(‚¨áÔ∏è) then
				guesses[current_row][current_guess] += 1
	   if level == "hard" then 
			   if guesses[current_row][current_guess] > 7 then 
			     guesses[current_row][current_guess] = 1
		    end
		  else
			   if guesses[current_row][current_guess] > 6 then 
			     guesses[current_row][current_guess] = 1
		    end
		  end
		end
		
		--switching choices 
		if btnp(‚û°Ô∏è) then current_guess += 1 end
		if btnp(‚¨ÖÔ∏è) then current_guess -= 1	end
		if current_guess > 4 then current_guess = 1 end
		if current_guess < 1 then current_guess = 4 end
end 

function restart()
  current_guess = 1
  current_row = 1
  correct_color = 1
  correct_spot = 2
  solved = false
		
		if level == "hard" then
		  possible_colors = {1,2,3,4,5,6,7}
		else
		  possible_colors = {1,2,3,4,5,6}
		end
		
		code = {
		 rnd(possible_colors),
		 rnd(possible_colors),
		 rnd(possible_colors),
		 rnd(possible_colors)
		}			
		guesses = {
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7},
		 {7, 7, 7, 7}
		}
		answers = {
		  {0, 0, 0, 0},
		  {0, 0, 0, 1},
		  {0, 0, 0, 2},
		  {0, 0, 1, 1},
		  {0, 0, 1, 2},
		  {0, 0, 2, 2},
		  {0, 1, 1, 1},
		  {0, 1, 1, 2},
		  {0, 1, 2, 2},
		  {0, 2, 2, 2},
		  {1, 1, 1, 1},
		  {1, 1, 1, 2},
		  {1, 1, 2, 2},
		  {1, 2, 2, 2},
		  {2, 2, 2, 2}
  }
		solutions = {}
end
-->8
--check
function check()
		code_copy = shallow_copy(code)
		solution = {0, 0, 0, 0}
		
		for i=1,#guesses[current_row] do
		  // check for correct spot
		  if guesses[current_row][i] == code_copy[i] then
		    solution[i] = correct_spot
		    code_copy[i] = 99
		  else
		   // check for correct color
			  for j=1,#code_copy do
		     if guesses[current_row][i] == code_copy[j] then
		       solution[j] = correct_color
		       code_copy[j] = 99
		    		 break
		     end
		   end
		  end
		end
		
		-- resets copy for next guess
		code_copy = shallow_copy(code)
		
	 sort(solution)
	 solutions[current_row] = solution
		
	 if tables_equal(guesses[current_row], code) then
    solved = true	 
	 else
	   current_row += 1
		  current_guess = 1
	 end
end 
-->8
--draw bubbles and pins
y=18		

function draw_bubbles()
  for i=1,#guesses do
    spr((current_row == i and current_guess == 1) and guesses[i][1] + 7 or guesses[i][1], 30, y + (10 * i))
		  spr((current_row == i and current_guess == 2) and guesses[i][2] + 7 or guesses[i][2], 45, y + (10 * i))
		  spr((current_row == i and current_guess == 3) and guesses[i][3] + 7 or guesses[i][3], 60, y + (10 * i))
		  spr((current_row == i and current_guess == 4) and guesses[i][4] + 7 or guesses[i][4], 75, y + (10 * i))
  end
end

function draw_pins()
  for i=1,#guesses do
   sprite = 1
   
   for j=1,#answers do
    if tables_equal(answers[j], solutions[i]) then
      sprite = j
    end  
   end
   
   spr(33 + sprite - 1,90,y + 10 * i)
  end
end
-->8
--other functions

function shallow_copy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

function sort(a)
	 for i=1,#a do
	   local j = i
	   
	   while j > 1 and a[j-1] > a[j] do
	    a[j],a[j-1] = a[j-1],a[j]
	    j = j - 1
	   end
	 end
end

function tostring(any)
    if type(any)=="function" then 
        return "function" 
    end
    if any==nil then 
        return "nil" 
    end
    if type(any)=="string" then
        return any
    end
    if type(any)=="boolean" then
        if any then return "true" end
        return "false"
    end
    if type(any)=="table" then
        local str = "{ "
        for k,v in pairs(any) do
            str=str..tostring(k).."->"..tostring(v).." "
        end
        return str.."}"
    end
    if type(any)=="number" then
        return ""..any
    end
    return "unkown" -- should never show
end

function tables_equal(t1,t2)
   local ty1 = type(t1)
   local ty2 = type(t2)
   if ty1 ~= ty2 then return false end
   -- non-table types can be directly compared
   if ty1 ~= 'table' and ty2 ~= 'table' then return t1 == t2 end
   -- as well as tables which have the metamethod __eq
   local mt = getmetatable(t1)
   if not ignore_mt and mt and mt.__eq then return t1 == t2 end
   for k1,v1 in pairs(t1) do
      local v2 = t2[k1]
      if v2 == nil or not tables_equal(v1,v2) then return false end
   end
   for k2,v2 in pairs(t2) do
      local v1 = t1[k2]
      if v1 == nil or not tables_equal(v1,v2) then return false end
   end
   return true
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007777000077770000777700007777000077770000777700007777000055550000555500005555000055550000555500005555000055550000000000
00700700079999700788887007cccc7007eeee700722227007bbbb7007000070059999500588885005cccc5005eeee500522225005bbbb500500005000000000
00077000079999700788887007cccc7007eeee700722227007bbbb7007000070059999500588885005cccc5005eeee500522225005bbbb500500005000000000
00077000079999700788887007cccc7007eeee700722227007bbbb7007000070059999500588885005cccc5005eeee500522225005bbbb500500005000000000
00700700079999700788887007cccc7007eeee700722227007bbbb7007000070059999500588885005cccc5005eeee500522225005bbbb500500005000000000
00000000007777000077770000777700007777000077770000777700007777000055550000555500005555000055550000555500005555000055550000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008808800008880000888888088888880088888800888880088888880088888008888880000000000000000000000000000000000000000000000000
00000000080080080080008008000000000080000800000008000008000080000800000808000008000000000000000000000000000000000000000000000000
00000000080000080800000808000000000080000800000008000008000080000800000808000008000000000000000000000000000000000000000000000000
00000000080000080800000800888880000080000088888808888880000080000800000808000008000000000000000000000000000000000000000000000000
00000000080000080888888800000008000080000800000008800000000080000800000808000008000000000000000000000000000000000000000000000000
00000000080000080800000800000008000080000800000008088800000080000800000808000008000000000000000000000000000000000000000000000000
00000000080000080800000808888880000080000088888808000088088888880800000808888880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055005500550055005500550055005500550055005500550055009900550099005500990055003300990099009900990033009900330033003300330
00000000055005500550055005500550055005500550055005500550055009900550099005500990055003300990099009900990033009900330033003300330
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055005500550099005500330099009900330099003300330099009900330099003300330033003300990099003300990033009900330099003300330
00000000055005500550099005500330099009900330099003300330099009900330099003300330033003300990099003300990033009900330099003300330
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007777776600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00777777777666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777777777776600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77700077770007660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77000007700000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77000007700000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77000007700000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77000007700000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77700077770007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777077777660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777770077776600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077777777760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007070070660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007070070600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007070070600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007777766600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001112131415161117181900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000404100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000505100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
